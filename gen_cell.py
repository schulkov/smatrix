import numpy as np

a = 5.8

bas_typ = np.array([11,     11,    11,    11,    17,    17,    17,    17], dtype = int)
bas_pos = np.array([ 0,0,0, a,a,0, a,0,a, 0,a,a, a,0,0, 0,a,0, 0,0,a, a,a,a ]).reshape((8,3)) / 2

Nx = 1
Ny = 1
Nz = 1

Natm = 8 * Nx*Ny*Nz
print("#  * Coordinates (in Angstroms)")
print("#  number of atoms")
print("#     nuclear charge, x, y, z")
print(Natm)
R = np.zeros(3)
for suX in range(Nx):
	for suY in range(Ny):
		for suZ in range(Nz):
			R = a*suX, a*suY, a*suZ
			for typ, pos in zip(bas_typ, bas_pos):
				p = pos+R
				print('{0:2d} {1:.6f} {2:.6f} {3:.6f}  '.format(typ, p[0], p[1], p[2]) )
bas_coeff = { \
11:"""    Idx  0  7
     23.518800761960  0.037798268053
     11.135656103275  0.180415272016
      4.647813820246 -0.084235489885
      1.866708259982 -0.502007239468
      0.734683697196 -0.487454712994
      0.275672995860 -0.088909855778
      0.049895108245 -0.000245624853
    Idx 0  7
     23.518800761960  0.005040470618
     11.135656103275  0.031210048356
      4.647813820246 -0.021214584887
      1.866708259982 -0.088006426680
      0.734683697196 -0.241562643580
      0.275672995860  0.046069503612
      0.049895108245  1.008694292400
    Idx  1  7
     23.518800761960 -0.041235150854
     11.135656103275 -0.102704065658
      4.647813820246 -0.276507156374
      1.866708259982 -0.405087985600
      0.734683697196 -0.345669762598
      0.275672995860 -0.128294724774
      0.049895108245 -0.002074313963""", \
17:"""    Idx  0  4
      2.379078117601  0.349064979100
      1.470718465013  0.023265903500
      0.461213474057 -1.015492630400
      0.150014717415 -0.402599991500
    Idx  1  4
      2.379078117601  0.116462270400
      1.470718465013 -0.193945393700
      0.461213474057 -0.463529682400
      0.150014717415 -0.299834714700"""}

bas_coeff = { \
11:"""    Idx  0  7
     23.518800761960 1 
     11.135656103275 1
      4.647813820246 1
      1.866708259982 1
      0.734683697196 1
      0.275672995860 1
      0.049895108245 1
    Idx 0  7
     23.518800761960 1
     11.135656103275 1
      4.647813820246 1
      1.866708259982 1
      0.734683697196 1
      0.275672995860 1
      0.049895108245 1
    Idx  1  7
     23.518800761960 1
     11.135656103275 1
      4.647813820246 1
      1.866708259982 1
      0.734683697196 1
      0.275672995860 1
      0.049895108245 1""", \
17:"""    Idx  0  4
      2.379078117601 1
      1.470718465013 1
      0.461213474057 1
      0.150014717415 1
    Idx  1  4
      2.379078117601 1
      1.470718465013 1
      0.461213474057 1
      0.150014717415 1"""}

bas_coeff_only_s = { \
11:"""    Idx  0  7
     23.518800761960  0.037798268053
     11.135656103275  0.180415272016
      4.647813820246 -0.084235489885
      1.866708259982 -0.502007239468
      0.734683697196 -0.487454712994
      0.275672995860 -0.088909855778
      0.049895108245 -0.000245624853
    Idx 0  7
     23.518800761960  0.005040470618
     11.135656103275  0.031210048356
      4.647813820246 -0.021214584887
      1.866708259982 -0.088006426680
      0.734683697196 -0.241562643580
      0.275672995860  0.046069503612
      0.049895108245  1.008694292400""", \
17:"""    Idx  0  4
      2.379078117601  0.349064979100
      1.470718465013  0.023265903500
      0.461213474057 -1.015492630400
      0.150014717415 -0.402599991500"""}


print("#  * Basis_Functions : Na (3), Cl (2)")
print("#  Basis set: SZV-MOLOPT-SR (https://github.com/cp2k/cp2k/blob/master/data/BASIS_MOLOPT)")
print("#  number of contracted Gaussian functions' blocks")
print("#      atomic centre, angular momentum, number of primitive Gaussian functions")
print("#         exponent, contraction coefficient")

Ncgf = (4*2+4*1) * Nx*Ny*Nz
print(Ncgf)
idx = 1
for suX in range(Nx):
        for suY in range(Ny):
                for suZ in range(Nz):
			for typ in bas_typ:
				msg = bas_coeff[typ]
				# replace the Idx segment in the basis coefficient with the atom index
				msg = msg.replace("Idx", str(idx) )
				print(msg)
				idx += 1




